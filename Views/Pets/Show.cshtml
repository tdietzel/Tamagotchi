<!DOCTYPE html>
<html>

<head>
  <title>View your pet</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

  <link rel="stylesheet" type="text/css" href="~/css/petsShow.css" />
</head>

<body>

  @model Tamagotchis.Models.Pet
  <div class="pet">
    @{
      string eat;

      string sleep;

      string play;

      string petImg;

      if (Model.Type == "Cat")
      {
        eat = "/img/kitten-food.png";
        sleep = "/img/kitten-sleeping.png";
        play = "/img/kitten-playing.png";
        petImg = "/img/kitten.png";
      }
      else
      {
        eat = "/img/food.png";
        sleep = "/img/sleep.png";
        play = "/img/playing.png";
        petImg = "/img/dog.png";
      }
    }
    <h1>@Model.Name</h1>
    @if (Model.Alive == true)
    {
      @if (Model.IsSleeping == true)
      {
        <img src="@sleep" />
        <b>
          <p>@Model.Name is sleeping... zZz</p>
        </b>
      }
      else if (Model.IsPlaying == true)
      {
        <img src="@play" />
        <b>
          <p>@Model.Name is playing!</p>
        </b>
      }
      else if (Model.IsFeeding == true)
      {
        <img src="@eat" />
        <b>
          <p>@Model.Name is eating...</p>
        </b>
      }
      else
      {
        <img src="@petImg" id="pet-img-@Model.Id" alt="Pet Image" />
        {
        RenderHearts(Model.Fullness, Model.Id);
        RenderEnergy(Model.Energy, Model.Id);
        RenderHappiness(Model.Attention, Model.Id);
        }
      
      }
      <b>
        <p>Age: @Model.Age yrs</p>
        <p>Weight: @Model.Weight lbs</p>
      </b>
      @if (Model.IsSleeping == false && Model.IsPlaying == false && Model.IsFeeding == false)


      {
        <div class="action-buttons">
          <form action="/pets/action" method="post">
            <input type="hidden" name="petId" value="@Model.Id" />
            <input type="hidden" name="action" value="feed" />
            <button type="submit">Feed</button>
          </form>

          <form action="/pets/action" method="post">
            <input type="hidden" name="petId" value="@Model.Id" />
            <input type="hidden" name="action" value="sleep" />
            <button type="submit">Sleep</button>
          </form>

          <form action="/pets/action" method="post">
            <input type="hidden" name="petId" value="@Model.Id" />
            <input type="hidden" name="action" value="play" />
            <button type="submit">Play</button>
          </form>
        </div>
      }
      @if (TempData["LowEnergyAlert"] != null)
      {
        <script type="text/javascript">
          alert('@TempData["LowEnergyAlert"]');
        </script>
      }
    }
    else
    {
      <img src="~/img/deadDog.png" />
      <b>
        <p>Lived to be: @Model.Age yrs old</p>
      </b>
    }
  </div>
  <form class="playground-form" action="/pets" method="get">
    <button type="submit">Return to pet playground</button>
  </form>
  @* turn these to buttons or attach some kind of onclick handler. These need to do several things: connect to the
  methods
  in toy and food to use item, connect to methods to feed and play in pet, and the buttons/whatevers need to be deleted
  using the delete methods in toy and food. also, the visual representation of the item on the page needs to disappear.
  To re-render the page, reroute to this same page with specific id *@

  <div class="inventory-style">
    <h1 class="inventory-title">Inventory</h1>
    <div class="inventory">
      @foreach (var food in Tamagotchis.Models.Pet._inventory)
      {
        <button class="inventory-item" onclick="applyItem(@food.Id, @Model.Id, 'food')" data-item-id="@food.Id"
          data-pet-id="@Model.Id">
          <p>@food.Name</p>
          <p class="hp">@food.Fullness</p>
          <img class="fullness" src="~/img/hearts.png" />
        </button>
      }
      @foreach (var toy in Tamagotchis.Models.Pet._inventoryToy)
      {
        <button class="inventory-item" onclick="applyItem(@toy.Id, @Model.Id, 'toy')" data-item-id="@toy.Id"
          data-pet-id="@Model.Id">
          <p>@toy.Name</p>
          <p class="excitement">@toy.Excitement</p>
          <img class="fullness" src="~/img/lightning-bolt.png" />
        </button>
      }
    </div>
  </div>
  </div>

  <script>
    setTimeout(function () {
      window.location.reload();
    }, 10000);
  </script>

  @functions
  {
    void RenderHearts(int value, int petId)
    {
      <div class="health-hearts" id="pet-fullness-@petId">
        @for (var i = 0; i < 5; i++)
        {
          <img id="heart" src="/img/@(i * 20 < value ? "hearts.png" : "heart.png")" alt="Heart" />
        }
      </div>
    }
    void RenderEnergy(int value, int petId)
    {
      <div class="health-hearts" id="pet-energy-@petId">
        @for (var i = 0; i < 5; i++)
        {
          <img id="heart" src="/img/@(i * 20 < value ? "lightning-bolt.png" : "lightning-bolt-black.png")"
            alt="Lightning Bolt" />
        }
      </div>
    }

    void RenderHappiness(int value, int petId)
    {
      <div class="health-hearts" id="pet-attention-@petId">
        <img id="happiness" src="/img/@(value > 70 ? "happy-face.png" : value > 40 ? "neutral-face.png" : "sad-face.png")"
          alt="Happiness" />
      </div>
    }
  }

</body>
<script>
  function applyItem(itemId, petId, itemType) {
    fetch(`/pets/applyItem`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ itemId, petId, itemType })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Remove the item from the inventory UI
          document.querySelector(`button[data-item-id='${itemId}'][data-pet-id='${petId}']`).remove();

          // Update the pet's status on the page
          updatePetStatus(petId, data.newFullness, data.newEnergy, data.newHappiness); //itemType??

          // Display a success message
          alert('Item applied successfully!');
        } else {
          alert('Failed to apply item to pet');
        }
      })
      .catch((error) => {
        console.error('Error:', error);
        alert('An error occurred while applying the item.');
      });
  }

  function updatePetStatus(petId, fullness, energy, attention) {
    updateFullnessDisplay(petId, fullness);
    updateEnergyDisplay(petId, energy);
    updateAttentionDisplay(petId, attention);

    // Update pet image
    const petImage = document.getElementById(`pet-img-${petId}`);
    if (fullness <= 20) { // Example condition, adjust as needed
      petImage.src = '/path/to/hungry-image.png'; // Update the image source as per the condition
    }
    // Add more conditions as needed
  }
</script>


@* <script src=".\Tamagotchi\Views\Pets\inventoryActions.js"></script> *@

</html>
